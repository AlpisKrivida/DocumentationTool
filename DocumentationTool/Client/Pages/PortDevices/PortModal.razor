@inject ICableRepository cableRepository

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cables</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-12">
                            <div class="card">

                                @*<div class="form-group">
                                    <a class="btn btn-info" href="cable/create"><span class="ri oi oi-plus" /> New cable</a>
                                </div>*@

                                <div class="form-row p-1">
                                    <div class="form-group m-1">
                                        <label>Display </label>
                                        <select class="custom-select-sm" @bind="@recordsPerPage" @onclick="LoadPage">
                                            <option value="">5</option>
                                            <option>10</option>
                                            <option>15</option>
                                            <option>20</option>
                                        </select>
                                        <label> cables</label>
                                    </div>
                                </div>


                                <GenericList List="Cables">
                                    <WholeListTemplate>
                                        <table class="table">
                                            <thead class="thead-light">
                                                <tr>
                                                    <th>
                                                    </th>
                                                    <th>Title</th>
                                                    <th>Type</th>
                                                    <th>Cable lenght</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var item in Cables)
                                                {
                                                    <tr>
                                                        <th>
                                                            <input type="checkbox" @onchange="(e) => CheckboxClicked(e.Value, item)" />
                                                        </th>
                                                        <td>@item.General.Title</td>
                                                        <td>@item.CableType</td>
                                                        <td>@item.CableLenght</td>
                                                        <td>
                                                            <a href="/cable/detail/@item.Id"><span class="oi oi-eye" /></a>
                                                            @*<a href="/cable/edit/@item.Id"><span class="oi oi-pencil" /></a>
                                                            <a href="/cable" @onclick="@(() => DeleteCable(item.Id))"><span class="oi oi-trash" /></a>*@
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </WholeListTemplate>
                                </GenericList>
                                <div class="row">
                                    <div class="col-12">
                                        <div class="d-flex">
                                            <div class="ml-auto">
                                                <Pagination CurrentPage="@paginationDTO.Page" TotalAmountPages="totalAmountPages"
                                                            SelectedPage="SelectedPage" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    List<Cable> Cables;
    List<bool> CheckBox;
    PaginationDTO paginationDTO = new PaginationDTO();
    private int totalAmountPages;
    private int recordsPerPage = 5;
    private int currentCheckbox = 0;

    [Parameter] public List<Cable> SelectedCables { get; set; }

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private void CheckboxClicked(object e, Cable cable)
    {
        if((bool)e)
        {
            SelectedCables.Add(cable);
        }
        else
        {
            SelectedCables.Remove(cable);
        }
        Console.WriteLine(SelectedCables.Count());
    }

    private bool GetCheckBoxValue()
    {
        CheckBox.Add(false);

        return CheckBox.ElementAt(currentCheckbox);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCables();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task LoadPage()
    {
        paginationDTO = new PaginationDTO();
        await LoadCables();
    }

    private async Task LoadCables()
    {
        paginationDTO.RecordsPerPage = recordsPerPage;
        var paginatedResponse = await cableRepository.GetCables(paginationDTO);
        Cables = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadCables();
    }

    private async Task DeleteCable(int id)
    {
        await cableRepository.DeleteCable(id);
        await LoadCables();
    }
}