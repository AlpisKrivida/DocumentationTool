@page "/port/create/{Device}/{DeviceId:int}"
@using DocumentationTool.Client.Shared.DevicePortSH
@inject NavigationManager navigationManager
@inject IPortRepository portRepository

<DevicePortForm 
                DevicePort="DevicePort"
                OnValidSubmit="SaveData"
                SelectedCable="SelectedCable"
                />

@code {
    [Parameter] public string Device { get; set; }
    [Parameter] public int DeviceId { get; set; }

    public Cable SelectedCable = new Cable();
    private DevicePort DevicePort = new DevicePort();

    private async Task SaveData()
    {
        try
        {
            DevicePort.Cable = SelectedCable;
            switch (Device)
            {
                case "server":
                    DevicePort.ServerInpuId = DeviceId;
                    DevicePort.ServerId = DeviceId;
                    break;
                case "switch":
                    DevicePort.SwitchInputId = DeviceId;
                    break;
                case "router":
                    DevicePort.RouterInpuId = DeviceId;
                    break;
                case "printer":
                    break;
                default:
                    throw new ArgumentException(message: "invalid device value", paramName: nameof(Device));
            };


            var portId = await portRepository.CreateDevicePort(DevicePort);

            navigationManager.NavigateTo(Device);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
