@page "/monitor"
@inject IMonitorRepository monitorRepository

<h3>Monitor Index</h3>

<div class="form-group">
    <a class="btn btn-info" href="monitor/create">New Monitor</a>
</div>

<Pagination CurrentPage="@paginationDTO.Page" TotalAmountPages="totalAmountPages"
            SelectedPage="SelectedPage" />

<GenericList List="Monitors">
    <WholeListTemplate>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Display</th>
                    <th>Display Measure</th>
                    <th>Resolution</th>
                    <th>Type</th>
                    <th>Pivot</th>
                    <th>Speaker</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Monitors)
                {
                    <tr>
                        <td>
                            <a class="btn btn-success" href="/monitor/edit/@item.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="@(() => DeleteMonitor(item.Id))">Delete</button>
                        </td>
                        <td>@item.Display</td>
                        <td>@item.DisplayMeasure</td>
                        <td>@item.Resolution</td>
                        <td>@item.Type</td>
                        <td>@item.Pivot</td>
                        <td>@item.Speaker</td>
                    </tr>
                }
            </tbody>
        </table>
    </WholeListTemplate>
</GenericList>
@code {
    List<Monitor> Monitors;
    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 1 };
    private int totalAmountPages;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadMouses();
        }
        catch (Exception ex)
        {

        }
    }

    private async Task LoadMouses()
    {
        var paginatedResponse = await monitorRepository.GetMonitors(paginationDTO);
        Monitors = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadMouses();
    }

    private async Task DeleteMonitor(int id)
    {
        await monitorRepository.DeleteMonitor(id);
        await LoadMouses();
    }
}
