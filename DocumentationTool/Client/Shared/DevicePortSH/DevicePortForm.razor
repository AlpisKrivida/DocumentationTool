@using DocumentationTool.Client.Pages.PortDevices

@inject IRouterRepository routerRepository
@inject ISwitchRepository switchRepository

<h3>Device port</h3>
<EditForm Model="DevicePort" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group row">
        <div class="col-md-8">
            <div class="formInputModel">
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Title</label>
                    <div class="col-sm-4">
                        <InputText class="form-control form-control-sm" @bind-Value="@DevicePort.Title" />
                        <ValidationMessage For="@(() => DevicePort.Title)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Type</label>
                    <div class="col-sm-4">
                        <InputSelect class="form-control form-control-sm" @bind-Value="@DevicePort.Type">
                            <option>Select type...</option>
                            <option>In</option>
                            <option>Output</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => DevicePort.Type)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Mode</label>
                    <div class="col-sm-4">
                        <InputText class="form-control form-control-sm" @bind-Value="@DevicePort.Mode" />
                        <ValidationMessage For="@(() => DevicePort.Mode)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Plug</label>
                    <div class="col-sm-4">
                        <InputText class="form-control form-control-sm" @bind-Value="@DevicePort.Plug" />
                        <ValidationMessage For="@(() => DevicePort.Plug)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Negotiation</label>
                    <div class="col-sm-4">
                        <InputText class="form-control form-control-sm" @bind-Value="@DevicePort.Negotiation" />
                        <ValidationMessage For="@(() => DevicePort.Negotiation)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Duplex</label>
                    <div class="col-sm-4">
                        <InputText class="form-control form-control-sm" @bind-Value="@DevicePort.Duplex" />
                        <ValidationMessage For="@(() => DevicePort.Duplex)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Speed</label>
                    <div class="col-sm-4">
                        <InputNumber class="form-control form-control-sm" @bind-Value="@DevicePort.Speed" />
                        <ValidationMessage For="@(() => DevicePort.Speed)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Speed Measure</label>
                    <div class="col-sm-4">
                        <InputText class="form-control form-control-sm" @bind-Value="@DevicePort.Type" />
                        <ValidationMessage For="@(() => DevicePort.Type)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Mac</label>
                    <div class="col-sm-4">
                        <InputText class="form-control form-control-sm" @bind-Value="@DevicePort.Mac" />
                        <ValidationMessage For="@(() => DevicePort.Mac)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Cable</label>
                    @if (SelectedCable.General != null)
                    {
                        <div class="col-sm-4">
                            <input disabled class="form-control form-control-sm" @bind="@SelectedCable.General.Title" />
                        </div>
                    }
                    else
                    {
                        <div class="col-sm-4">
                            <input disabled class="form-control form-control-sm" @bind="@SelectedCable.CableType" />
                        </div>
                    }

                    <div class="col-sm-1">
                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => Modal.Open()">+</button>
                    </div>

                    <PortModal @ref="Modal"
                               SelectedCable="TestCable"
                               saved="GetCable" />
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Device type</label>
                    <div class="col-sm-4">
                        <select class="form-control form-control-sm" @bind="@DeviceType" @onclick="test">
                            <option>Router</option>
                            <option>Switch</option>
                            <option>Printer</option>
                            <option>Server</option>
                        </select>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Device</label>
                    @if (DeviceType == "Router" && TestDevicePort.RouterDevice != null)
                    {
                        <div class="col-sm-4">
                            <input disabled class="form-control form-control-sm" @bind="@TestDevicePort.RouterDevice.General.Title" />
                        </div>
                    }
                    else if (DeviceType == "Switch" && TestDevicePort.SwitchDevice != null)
                    {
                        <div class="col-sm-4">
                            <input disabled class="form-control form-control-sm" @bind="@TestDevicePort.SwitchDevice.General.Title" />
                        </div>
                    }
                    else
                    {
                        <div class="col-sm-4">
                            <input disabled class="form-control form-control-sm" />
                        </div>
                    }

                    <div class="col-sm-1">
                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => DeviceModal.Open(DeviceType)">+</button>
                    </div>

                    <PortDeviceModal @ref="DeviceModal"
                                     DeviceName=@DeviceType
                                     DevicePort="TestDevicePort"
                                     saved="GetDevicePort" />
                </div>
            </div>
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Save Changes</button>

</EditForm>

@code {
    [Parameter] public DevicePort DevicePort { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public Cable SelectedCable { get; set; }

    public Cable TestCable = new Cable();
    public DevicePort TestDevicePort = new DevicePort();

    private PortModal Modal { get; set; }
    private PortDeviceModal DeviceModal { get; set; }
    private string DeviceType { get; set; }

    //public List<Switch> SwitchDevices;
    //public List<RouterDevice> RouterDevices;

    //Pages
    //PaginationDTO paginationDTO = new PaginationDTO();
    //private int totalAmountPages;
    //private int recordsPerPage = 5;

    private void test()
    {
        Console.WriteLine(DeviceType);
        Console.WriteLine(DevicePort.Type);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            DevicePort.Type = "In";
            DeviceType = "Router";

            //await LoadData();
        }
        catch (Exception ex)
        {

        }
    }

    //private async Task LoadData()
    //{
    //    if (DeviceType == "Router")
    //    {
    //        paginationDTO.RecordsPerPage = recordsPerPage;
    //        var paginatedResponse = await routerRepository.GetRouters(paginationDTO);
    //        RouterDevices = paginatedResponse.Response;
    //        totalAmountPages = paginatedResponse.TotalAmountPages;
    //    }
    //    else if (DeviceType == "Switch")
    //    {
    //        paginationDTO.RecordsPerPage = recordsPerPage;
    //        var paginatedResponse = await switchRepository.GetSwitches(paginationDTO);
    //        SwitchDevices = paginatedResponse.Response;
    //        totalAmountPages = paginatedResponse.TotalAmountPages;
    //    }
    //}

    private void GetCable(Cable item)
    {
        SelectedCable = item;
    }

    private void GetDevicePort(DevicePort item)
    {
        if (DevicePort.Type == "In")
        {
            switch (DeviceType)
            {
                case "Router":
                    DevicePort.RouterInpuId = item.RouterId;
                    break;
                case "Swich":
                    DevicePort.SwitchInputId = item.RouterId;
                    break;
                case "Printer":
                    DevicePort.PrinterInputId = item.RouterId;
                    break;
                case "Server":
                    DevicePort.ServerInpuId = item.RouterId;
                    break;
            }
        }
        else if (DevicePort.Type == "Out")
        {
            switch (DeviceType)
            {
                case "Router":
                    DevicePort.RouterOutputd = item.RouterId;
                    break;
                case "Swich":
                    DevicePort.SwitchOutputId = item.RouterId;
                    break;
                case "Printer":
                    DevicePort.PrinterOutputId = item.RouterId;
                    break;
                case "Server":
                    DevicePort.ServerInpuId = item.RouterId;
                    break;
            }
        }
        else { }
    }

    private void SetIDs(DevicePort item)
    {

    }
}

